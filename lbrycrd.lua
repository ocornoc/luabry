local http = require "socket.http"
local ltn12 = require "ltn12"
local json = require "cjson"
local jrpc = require "luajrpc/jrpc"
local luabrycrd = {}

local funclist = {
	"abandonclaim",
	"abandonsupport",
	"claimname",
	"getclaimbyid",
	"getclaimsforname",
	"getclaimsfortx",
	"getclaimsintrie",
	"getclaimtrie",
	"getnameproof",
	"gettotalclaimednames",
	"gettotalclaims",
	"gettotalvalueofclaims",
	"getvalueforname",
	"listnameclaims",
	"supportclaim",
	"updateclaim",
	"getbestblockhash",
	"getblock",
	"getblockchaininfo",
	"getblockcount",
	"getblockhash",
	"getblockheader",
	"getchaintips",
	"getdifficulty",
	"getmempoolinfo",
	"getrawmempool",
	"gettxout",
	"gettxoutproof",
	"gettxoutsetinfo",
	"verifychain",
	"verifytxoutproof",
	"getinfo",
	"help",
	"stop",
	"generate",
	"generatetoaddress",
	"getblocktemplate",
	"getgenerate",
	"gethashespersec",
	"getmininginfo",
	"getnetworkhashps",
	"prioritisetransaction",
	"setgenerate",
	"submitblock",
	"addnode",
	"clearbanned",
	"disconnectnode",
	"getaddednodeinfo",
	"getconnectioncount",
	"getnettotals",
	"getnetworkinfo",
	"getpeerinfo",
	"listbanned",
	"ping",
	"setban",
	"createrawtransaction",
	"decoderawtransaction",
	"decodescript",
	"fundrawtransaction",
	"getrawtransaction",
	"sendrawtransaction",
	"signrawtransaction",
	"createmultisig",
	"estimatefee",
	"estimatepriority",
	"estimatesmartfee",
	"estimatesmartpriority",
	"validateaddress",
	"verifymessage",
	"abandontransaction",
	"addmultisigaddress",
	"backupwallet",
	"dumpprivkey",
	"dumpwallet",
	"encryptwallet",
	"getaccount",
	"getaccountaddress",
	"getaddressesbyaccount",
	"getbalance",
	"getnewaddress",
	"getrawchangeaddress",
	"getreceivedbyaccount",
	"getreceivedbyaddress",
	"gettransaction",
	"getunconfirmedbalance",
	"getwalletinfo",
	"importaddress",
	"importprivkey",
	"importprunedfunds",
	"importpubkey",
	"importwallet",
	"keypoolrefill",
	"listaccounts",
	"listaddressgroupings",
	"listlockunspent",
	"listreceivedbyaccount",
	"listreceivedbyaddress",
	"listsinceblock",
	"listtransactions",
	"listunspent",
	"lockunspent",
	"move",
	"removeprunedfunds",
	"sendfrom",
	"sendmany",
	"sendtoaddress",
	"setaccount",
	"settxfee",
	"signmessage",
}

for _,v in pairs(funclist) do
	luabrycrd[v] = function(params, id, user, pass)
		user = user or ""
		pass = pass or ""
		
		local body = {
			jsonrpc = "2.0",
			method = v,
			params = params,
			id = id,
		}
		
		assert(jrpc.validate_request(body))
		
		local jstring = json.encode(body)
		
		return {
			url = "http://localhost:9245",
			method = "POST",
			headers = {
				["Content-Type"]   = "application/json-rpc",
				["Accept"]         = "application/json-rpc",
				["Content-Length"] = jstring:len(),
				["Authentication"] = "Basic " .. mime.b64(user .. ":" .. pass),
			},
			source = ltn12.source.string(jstring),
		}
	end
end

return luabrycrd
